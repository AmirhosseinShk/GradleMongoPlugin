import org.gradle.api.tasks.wrapper.Wrapper.DistributionType

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
}

plugins {
    id 'com.gradle.plugin-publish' version '0.9.9'
    id 'maven-publish'
    id 'groovy'
    id 'idea'
    id 'eclipse'
    id 'signing'
    id 'java-gradle-plugin'
}

archivesBaseName = 'gradle-mongo-plugin'
group = 'com.sourcemuse.gradle.plugin'
version = '1.0.8-SNAPSHOT'

sourceCompatibility = 18
targetCompatibility = 18

repositories {
    mavenCentral()
}

dependencies {
    implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:3.4.6'
    implementation 'org.mongodb:mongo-java-driver:3.12.11'

    testImplementation 'org.spockframework:spock-core:2.1-groovy-3.0', {
        exclude module: 'groovy-all'
    }
    testImplementation 'org.littleshoot:littleproxy:1.1.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    required { !version.endsWith('SNAPSHOT') }
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {

			pom {
				name = 'Gradle Mongo Plugin'
				description = 'Gradle plugin for managing a local instance of MongoDb'
				url = 'https://github.com/sourcemuse/GradleMongoPlugin'
				
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'roberttaylor426'
						name = 'Robert Taylor'
						email = 'john.doe@example.com'
					}
					developer {
						id = 'flashboss'
						name = 'Luca Stancapiano'
						email = 'luca.stancapiano@vige.it'
					}
				}
				scm {
					connection = 'scm:git@github.com:sourcemuse/GradleMongoPlugin.git'
					developerConnection = 'scm:git@github.com:sourcemuse/GradleMongoPlugin.git'
					url = 'scm:git@github.com:sourcemuse/GradleMongoPlugin.git'
				}
			}
		}
    }	
    repositories {
        maven {
            name = 'oss.sonatype'
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

pluginBundle {
    website = 'https://github.com/sourcemuse/GradleMongoPlugin'
    vcsUrl = 'https://github.com/sourcemuse/GradleMongoPlugin'
    description = 'Gradle plugin for running a managed instance of Mongo.'
    tags = ['mongo', 'mongodb']

    plugins {
        mongoPlugin {
            id = 'com.sourcemuse.mongo'
            displayName = 'Gradle Mongo plugin'
        }
    }
}

gradlePlugin {
    plugins {
        mongoPlugin {
            id = 'com.sourcemuse.mongo'
            implementationClass = 'com.sourcemuse.gradle.plugin.flapdoodle.gradle.GradleMongoPlugin'
        }
    }
}

String getSonatypeUsername() {
    properties['sonatypeUsername'] ?: 'username'
}

String getSonatypePassword() {
    properties['sonatypePassword'] ?: 'password'
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}
